#!/bin/bash

private_repo='false'
commit_message='initial add'
release='1.0.0'
tf_workspace='false'
gh_description=''

print_usage() { 
  printf "Usage: Creates new Github repo in ${PWD}" 
  printf "${0} [options]"
  printf "-p <flag:sets private repo>"
  printf "-m <arg:commit message>"
  printf "-r <arg:sets release version>"
  printf "-t <flag:creates tfe workspace>"
  printf "-d <arg:github repo description>"
}

while getopts 'pm:r:td:' flag; do
  case "${flag}" in
    p) private_repo='true' ;;
    m) commit_message="${OPTARG}" ;;
    r) release="${OPTARG}" ;;
    t) tf_workspace='true' ;;
    d) gh_description="${OPTARG}" ;;
    h) print_usage
       exit 0 ;;
    *) print_usage
       exit 1 ;;
  esac
done


REPO=$(pwd| awk -F/ '{ print $NF }')
cd $(dirname ${0})
terraform workspace new ${REPO}
terraform init
terraform apply -auto-approve -var repo=${REPO} -var description="${gh_description}" -var private=${private_repo}
output=$(terraform output)
terraform workspace select default
cd -
rm .gitignore LICENSE README.md || echo
git init
git remote add origin git@github.com:${TF_VAR_github_organization}/${REPO}
git pull origin master
git add .
git commit -m "${commit_message}"
git push -u origin master

echo ${output}

if [ ! -z "${1}" ]
then
  git tag -a ${release} -m "${2}"
  git push -u origin ${release}
fi
 
if [ ${tf_workspace} == 'true' ]
then
  tfe workspace new -tfe-workspace ${REPO} -vcs-id ${TF_VAR_github_organization}/${REPO}
  tfe pushconfig -tfe-workspace ${REPO}
fi
